@inject NavigationManager NavigationManager

@if (orderbook != null)
{
    <table class="table table-striped">
        <thead>
            <tr class="d-flex">
                <th class="col-2">Nazwa</th>
                <th class="col-2">Wartość</th>
                <th class="col-8">Opis</th>
            </tr>
        </thead>
        <tbody>

            <tr class="d-flex">
                <td class="col-2">Status</td>
                <td class="col-2">@orderbook.Status</td>
                <td class="col-8">Status zapytania.</td>
            </tr>

            <tr class="d-flex">
                <td class="col-2">TimeStamp</td>
                <td class="col-2">@orderbook.Timestamp</td>
                <td class="col-8">Znacznik czasu.</td>
            </tr>

            <tr class="d-flex">
                <td class="col-2">Sekwencja</td>
                <td class="col-2">@orderbook.SeqNo</td>
                <td class="col-8">Numer sekwencji.</td>
            </tr>

        </tbody>
    </table>

    <div class="row mx-0">
        <div class="col-md-6">
            <h3 class="text-center">Oferty kupna</h3>
            <Orders OrderList="orderbook.Buy"/>
        </div>

        <div class="col-md-6">
            <h3 class="text-center">Oferty sprzedaży</h3>
            <Orders OrderList="orderbook.Sell" />
        </div>
    </div>
}
@code {
    [Parameter]
    public string MarketCode { get; set; }

    private BitBayTraderApp.Shared.Models.DTO.PublicRest.Orderbook orderbook { get; set; }
    private HubConnection hubConnection;

    protected override async Task OnParametersSetAsync()
    {
        await this.ConnectToHub();
    }

    private async Task ConnectToHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/publicAPI"))
            .Build();

        hubConnection.On<string, BitBayTraderApp.Shared.Models.DTO.PublicRest.Orderbook>("ReceiveOrderbook", (marketCode, orderbook) =>
        {
            if (marketCode == MarketCode)
            {
                this.orderbook = orderbook;
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }
}